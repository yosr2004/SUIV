const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Fonction pour lire un fichier de mani√®re synchrone
function readFileSync(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`Erreur lors de la lecture du fichier ${filePath}:`, error);
    return null;
  }
}

// Fonction pour √©crire dans un fichier de mani√®re synchrone
function writeFileSync(filePath, content) {
  try {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ Mise √† jour r√©ussie: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'√©criture dans le fichier ${filePath}:`, error);
    return false;
  }
}

// Fonction pour mettre √† jour package.json
function updatePackageJson() {
  const packageJsonPath = path.join(__dirname, 'SUIV', 'suiv', 'package.json');
  const content = readFileSync(packageJsonPath);
  
  if (!content) return false;
  
  const packageJson = JSON.parse(content);
  
  // Mettre √† jour les informations de base
  packageJson.name = "suiv-project";
  packageJson.author = "SUIV Team";
  packageJson.description = "SUIV - Plateforme de d√©veloppement professionnel et gestion de carri√®re";
  
  // Supprimer les r√©f√©rences √† Creative Tim dans repository et bugs
  if (packageJson.repository && packageJson.repository.url) {
    packageJson.repository.url = "git+https://github.com/suiv-team/suiv.git";
  }
  
  if (packageJson.bugs && packageJson.bugs.url) {
    packageJson.bugs.url = "https://github.com/suiv-team/suiv/issues";
  }
  
  // √âcrire les changements
  return writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
}

// Fonction pour mettre √† jour README.md
function updateReadme() {
  const readmePath = path.join(__dirname, 'SUIV', 'suiv', 'README.md');
  
  // Nouveau contenu du README
  const newReadme = `# SUIV - Plateforme de D√©veloppement Professionnel et Gestion de Carri√®re

## Description
SUIV est une plateforme compl√®te qui aide les utilisateurs √† g√©rer leur d√©veloppement professionnel, suivre leurs comp√©tences, et recevoir des recommandations personnalis√©es pour leur carri√®re gr√¢ce √† l'intelligence artificielle.

## Fonctionnalit√©s principales
- Syst√®me d'authentification complet
- Gestion de profil professionnel d√©taill√©
- √âvaluation et suivi des comp√©tences
- Messagerie en temps r√©el entre utilisateurs
- Syst√®me de mentorat
- Assistant IA pour recommandations personnalis√©es
- Analyse de CV et conseils de carri√®re

## Technologies utilis√©es
- Frontend: React, Material UI
- Backend: Node.js, Express
- Base de donn√©es: MongoDB
- Temps r√©el: Socket.IO
- IA: API Cohere

## Installation

\`\`\`bash
# Installer les d√©pendances
npm install

# Lancer le serveur de d√©veloppement
npm start
\`\`\`

## Structure du projet
- /backend - Code du serveur Node.js et API
- /src - Code source React
- /public - Fichiers statiques

## Licence
Tous droits r√©serv√©s.
`;
  
  return writeFileSync(readmePath, newReadme);
}

// Fonction pour supprimer les commentaires Creative Tim dans les fichiers JS/JSX
function removeCreativeTimComments() {
  const rootDir = path.join(__dirname, 'SUIV', 'suiv', 'src');
  
  // Expression r√©guli√®re pour trouver les commentaires Creative Tim
  const creativeTimRegex = /\/\*[\s\S]*?Product Page[\s\S]*?Creative Tim[\s\S]*?\*\//g;
  
  // Trouver tous les fichiers JS et JSX r√©cursivement
  const findCommand = process.platform === 'win32' 
    ? `dir /s /b "${rootDir}\\*.js" "${rootDir}\\*.jsx"`
    : `find "${rootDir}" -type f \\( -name "*.js" -o -name "*.jsx" \\)`;
  
  try {
    const files = execSync(findCommand, { encoding: 'utf8' })
      .trim()
      .split('\n')
      .filter(Boolean);
    
    let updatedCount = 0;
    
    for (const filePath of files) {
      const content = readFileSync(filePath);
      if (!content) continue;
      
      // Supprimer les commentaires Creative Tim
      const newContent = content.replace(creativeTimRegex, '');
      
      // Si le contenu a chang√©, √©crire le nouveau contenu
      if (content !== newContent) {
        if (writeFileSync(filePath, newContent)) {
          updatedCount++;
        }
      }
    }
    
    console.log(`‚úÖ ${updatedCount} fichiers ont √©t√© mis √† jour pour supprimer les commentaires Creative Tim.`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche ou mise √† jour des fichiers:', error);
    return false;
  }
}

// Ex√©cuter les fonctions
console.log('üîÑ Suppression des r√©f√©rences √† Creative Tim...');

const packageJsonUpdated = updatePackageJson();
console.log(packageJsonUpdated 
  ? '‚úÖ package.json mis √† jour avec succ√®s.' 
  : '‚ùå √âchec de la mise √† jour de package.json.');

const readmeUpdated = updateReadme();
console.log(readmeUpdated 
  ? '‚úÖ README.md mis √† jour avec succ√®s.' 
  : '‚ùå √âchec de la mise √† jour de README.md.');

const commentsRemoved = removeCreativeTimComments();
console.log(commentsRemoved 
  ? '‚úÖ Commentaires Creative Tim supprim√©s avec succ√®s.' 
  : '‚ùå √âchec de la suppression des commentaires Creative Tim.');

console.log('üèÅ Op√©ration termin√©e.'); 